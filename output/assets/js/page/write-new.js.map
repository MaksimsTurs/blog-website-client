{"version":3,"file":"write-new.js","sources":["../../../../src/store/creator/creator.ts","../../../../src/page/write-new/loader.tsx","../../../../src/page/write-new/page.tsx"],"sourcesContent":["import { type PayloadAction, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport type { ContentDraft, CreatorState } from './creator.type'\r\n\r\nimport localStorage from '@/lib/local-storage/localStorage'\r\n\r\nconst initState: CreatorState = {\r\n  contentDraft: localStorage.get('content-draft', '[]')  \r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'creator',\r\n  initialState: initState,\r\n  reducers: {\r\n    editOrinsertContentDraft: (state, { payload }: PayloadAction<ContentDraft>) => {\r\n      if(state.contentDraft.length === 0) return localStorage.set('content-draft', state.contentDraft = [payload])\r\n\r\n      const currentDraft = state.contentDraft.find((content, index) => content._id === payload._id ? { _id: content._id, index } : undefined)\r\n\r\n      if(currentDraft) {\r\n        localStorage.set('content-draft', state.contentDraft = state.contentDraft.map(content => content._id === payload._id ? payload : content))\r\n      } else {\r\n        localStorage.set('content-draft', state.contentDraft = [...state.contentDraft, payload])\r\n      }\r\n    },\r\n    removeContentDraft: (state, { payload }: PayloadAction<string>) => {\r\n      if(state.contentDraft.length === 0) return\r\n      localStorage.set('content-draft', state.contentDraft = state.contentDraft.filter(draft => draft._id !== payload))\r\n    }\r\n  }\r\n})\r\n\r\nexport const { editOrinsertContentDraft, removeContentDraft } = slice.actions\r\nexport default slice.reducer","import scss from './loader.module.scss'\r\nimport '@/scss/global.scss'\r\n\r\nexport default function WriteNewLoader() {\r\n  return(\r\n    <div className={`${scss.write_new_loader_container} flex-row-normal-center-medium`}>\r\n      <div className={`${scss.write_new_loader_body} flex-column-normal-normal-small`}>\r\n        <div className={scss.write_new_loader_input}></div>\r\n        <div className={scss.write_new_loader_input}></div>\r\n        <div className='flex-row-normal-normal-small'>\r\n          <button></button>\r\n          <button></button>\r\n          <button></button>\r\n        </div>\r\n        <div style={{ height: '10rem' }} className={scss.write_new_loader_input}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import scss from './page.module.scss'\r\n\r\nimport type { Content, ServerResponseError } from '@/global.type'\r\nimport type { AppDispatch, RootState } from '@/store/store'\r\nimport type { PostCommentsData } from '../post/page.type'\r\nimport type { CreatorState, ContentDraft } from '@/store/creator/creator.type'\r\n\r\nimport FormWrapper from \"@/component/form-wrapper/formWrapper\"\r\nimport TextInput from \"@/component/input/textInput/textInput\"\r\nimport TextArea from '@/component/input/textArea/textArea'\r\nimport MutatingLoader from '@/component/loader/mutatig-loader/mutatingLoader'\r\nimport TextTagInput from '@/component/input/text-tag-input/textTagInput'\r\nimport Button from '@/component/button/button'\r\nimport CheckBoxInput from '@/component/input/checkbox-input/checkBoxInput'\r\nimport LocalError from '@/component/errors/local-error/localError'\r\nimport WriteNewLoader from './loader'\r\n\r\nimport { Fragment, useRef } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate } from 'react-router-dom'\r\n\r\nimport { editOrinsertContentDraft, removeContentDraft } from '@/store/creator/creator'\r\n\r\nimport useForm from '@/custom-hook/use-form/useForm'\r\nimport useAuth from '@/custom-hook/use-auth/useAuth'\r\nimport useSearchParams from '@/custom-hook/use-search-params/useSearchParams'\r\nimport usePermitor from '@/custom-hook/use-permitor/useHavePermission'\r\nimport useMetadata from '@/custom-hook/use-metadata/useMetadata'\r\nimport useMutate from '@/custom-hook/use-request/useMutate'\r\n\r\nimport localStorage from '@/lib/local-storage/localStorage'\r\nimport fetcher from '@/lib/fetcher/fetcher'\r\nimport coockie from '@/lib/coockie/coockie'\r\n\r\n//Create content || Update content || Save draft || Update draft || Remove draft\r\nexport default function WriteNewPost() {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const redirect = useNavigate()\r\n  const creator = useSelector<RootState, CreatorState>(state => state.creator)\r\n\r\n  const searchParams = useSearchParams()\r\n  const auth = useAuth()\r\n  const { submit, reset, formState: { errors }} = useForm<Content>([['title', 'isMin:4:Title is to short!']])\r\n  const permitor = usePermitor()\r\n  \r\n  const contentID: string | null = searchParams.get('content-id')\r\n  const draftID: string | null = searchParams.get('draft-id')\r\n\r\n  if(!permitor.role(['Admin', 'Creator']).permited()) return <Navigate to='/'/>\r\n\r\n  const currContent: ContentDraft | undefined = \r\n    //Get content to edit\r\n    contentID ? \r\n    localStorage.get<ContentDraft>(contentID, 'null') :\r\n    //Get content draft to edit\r\n    draftID ?\r\n    creator.contentDraft.find(content => content._id === draftID) :\r\n    undefined\r\n\r\n  const isPost: boolean = currContent?.contentType === 'post'\r\n\r\n  useMetadata({ \r\n    title: \r\n      currContent?.isEdit && currContent ? `${isPost ? currContent.title : 'Comment'} ändern` :\r\n      draftID && currContent ? `${isPost ? currContent.title : 'Entwurf'} ändern` :\r\n      'Neue post schreiben',\r\n    description: 'Hier kannst neue post oder entwurfe schreiben oder ändern.'\r\n  })\r\n\r\n  const key: string = currContent?.isFromAdmin ? '' : currContent?.contentType === 'comment' ? `post-${currContent.onPost}-comments-${currContent.onPage}` : 'all-posts'\r\n  \r\n  const { mutate, isMutating, error } = useMutate<PostCommentsData | Content[]>(key)\r\n\r\n  const passError: ServerResponseError | undefined = error ? error : currContent?.isEdit && !currContent ? { code: 404, message: 'Content not found!' } : undefined\r\n  \r\n  const tagsRef = useRef<string[]>(currContent?.tags || [])\r\n  const contentRef = useRef<string>('')\r\n  \r\n  const createNew = async(data: any): Promise<void> => {\r\n    delete data.alt\r\n    delete data.uploadImg\r\n    delete data.url\r\n\r\n    mutate(async function(option) {\r\n      if(currContent?.isEdit) {\r\n        const updated = await fetcher.post<Content>(`/admin/${currContent?.contentType}/update`, {...data, content: contentRef.current, tags: tagsRef.current, id: draftID || contentID }, { 'Authorization': `Bearer ${coockie.getOne('PR_TOKEN')}` })\r\n\r\n        localStorage.remove(updated._id!)\r\n\r\n        //Edit post\r\n        if(currContent?.contentType === 'post') {\r\n          const state = option.state as Content[] || []\r\n\r\n          option.removeCache(`/post-${updated._id}`)\r\n\r\n          for(let index: number = (currContent?.onPage || 0) + 1; index >= 0; index--) {\r\n            option.removeCache(`${currContent.contentType}-${index}`)\r\n          }\r\n\r\n          if(!currContent.isFromAdmin) redirect(`/post/${updated._id}`)\r\n          else redirect(`/admin/${currContent.contentType}`)\r\n\r\n          return state.map(post => post._id === updated._id ? updated : post)\r\n        }\r\n        \r\n        //Edit comment\r\n        if(currContent?.contentType === 'comment') {\r\n          const state = option.state as PostCommentsData || { pagesCount: 0, comments: [] }\r\n\r\n          if(!currContent.isFromAdmin) {\r\n            redirect(`/post/${currContent?.onPost}?page=${currContent?.onPage}`)\r\n            return {...state, comments: state.comments.map(comment => comment._id === updated._id ? updated : comment) }\r\n          }\r\n\r\n          redirect('/admin/comment')\r\n          return undefined\r\n        }\r\n      }\r\n\r\n      //Insert post\r\n      const post = await fetcher.post<Content>(`/insert/post`, {...data, content: contentRef.current, tags: tagsRef.current }, { 'Authorization': `Bearer ${auth?.user?.token}` })\r\n      const state = option.state as Content[] || []\r\n\r\n      redirect(`/post/${post._id}`)\r\n      return [...state || [], post]\r\n    })\r\n  }\r\n\r\n  const getTags = (tags: string[]): void => {\r\n    tagsRef.current = tags\r\n  }\r\n\r\n  const saveDraft = (): void => {\r\n    const newDraftID: string = draftID || contentID || window.crypto.randomUUID()\r\n      \r\n    dispatch(editOrinsertContentDraft({...currContent, _id: newDraftID!, content: contentRef.current }))\r\n      \r\n    searchParams.set({ 'draft-id': newDraftID })\r\n    searchParams.remove(['content-id'])\r\n\r\n    localStorage.remove(contentID!)\r\n  }\r\n\r\n  const deleteDraft = (): void => {\r\n    dispatch(removeContentDraft(draftID || contentID!))\r\n    searchParams.remove(['draft-id'])\r\n    reset()\r\n    tagsRef.current = []\r\n    contentRef.current = ''\r\n  }\r\n\r\n  const getTextAreaContentValue = (content: string): void => {\r\n    contentRef.current = content\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      {isMutating && <MutatingLoader/>}\r\n      {auth.isAuthPending ?\r\n        <WriteNewLoader/> :\r\n        <div className={`${scss.create_new_post_container} flex-row-normal-center-big`}>\r\n          <FormWrapper className={scss.create_new_post_form} onSubmit={submit(createNew)} isPending={false}>\r\n              {currContent?.contentType !== 'comment' ?\r\n              <Fragment>\r\n                <TextInput name='title' errors={errors} defaultValue={currContent?.title} placeholder='Post title'/>\r\n                <CheckBoxInput name='isHidden' label='Hidde post' defaultValue={currContent?.isHidden}/>\r\n                <TextTagInput getTags={getTags} placeholder='Post tags' value={tagsRef.current}/>\r\n              </Fragment> : null}\r\n            <TextArea defaultValue={currContent?.content} placeholder='Write content body here...' getValue={getTextAreaContentValue}/>\r\n            <div className={scss.create_new_buttons_container}>\r\n              <Button label={currContent?.isEdit ? `Edit ${currContent?.contentType}` : `Create post`} type='submit'/>\r\n              <Button label={currContent && !contentID ? \"Save draft changes\" : 'Save as draft'} onClick={saveDraft}/>\r\n              <Button label=\"Delete draft\" onClick={deleteDraft}/>\r\n            </div>\r\n            {passError && <LocalError error={passError.message}/>}\r\n          </FormWrapper>\r\n      </div>}\r\n    </Fragment>\r\n  )\r\n}"],"names":["slice","createSlice","name","initialState","contentDraft","localStorage","get","reducers","editOrinsertContentDraft","state","payload","length","set","find","content","index","_id","map","removeContentDraft","filter","draft","actions","creator","reducer","WriteNewLoader","jsx","className","scss","write_new_loader_container","children","jsxs","write_new_loader_body","write_new_loader_input","style","height","dispatch","useDispatch","redirect","useNavigate","useSelector","searchParams","useSearchParams","auth","useAuth","submit","reset","formState","errors","useForm","permitor","usePermitor","contentID","draftID","role","permited","Navigate","to","currContent","isPost","contentType","useMetadata","title","isEdit","description","key","isFromAdmin","onPost","onPage","mutate","isMutating","error","useMutate","passError","code","message","tagsRef","useRef","tags","contentRef","Fragment","MutatingLoader","isAuthPending","FormWrapper","onSubmit","async","data","alt","uploadImg","url","option","updated","fetcher","post","current","id","Authorization","coockie","getOne","remove","removeCache","pagesCount","comments","comment","user","token","isPending","TextInput","defaultValue","placeholder","CheckBoxInput","label","isHidden","TextTagInput","getTags","value","TextArea","getValue","Button","type","onClick","newDraftID","window","crypto","randomUUID","LocalError"],"mappings":"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"}