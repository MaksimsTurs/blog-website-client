{"version":3,"file":"write-new.js","sources":["../../../../src/store/creator/creator.ts","../../../../src/page/write-new/loader.tsx","../../../../src/page/write-new/page.tsx"],"sourcesContent":["import { type PayloadAction, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport type { ContentDraft, CreatorState } from './creator.type'\r\n\r\nimport localStorage from '@/lib/local-storage/localStorage'\r\n\r\nconst initState: CreatorState = {\r\n  contentDraft: localStorage.get('content-draft', '[]')  \r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'creator',\r\n  initialState: initState,\r\n  reducers: {\r\n    editOrinsertContentDraft: (state, { payload }: PayloadAction<ContentDraft>) => {\r\n      if(state.contentDraft.length === 0) return localStorage.set('content-draft', state.contentDraft = [payload])\r\n\r\n      const currentDraft = state.contentDraft.find((content, index) => content._id === payload._id ? { _id: content._id, index } : undefined)\r\n\r\n      if(currentDraft) {\r\n        localStorage.set('content-draft', state.contentDraft = state.contentDraft.map(content => content._id === payload._id ? payload : content))\r\n      } else {\r\n        localStorage.set('content-draft', state.contentDraft = [...state.contentDraft, payload])\r\n      }\r\n    },\r\n    removeContentDraft: (state, { payload }: PayloadAction<string>) => {\r\n      if(state.contentDraft.length === 0) return\r\n      localStorage.set('content-draft', state.contentDraft = state.contentDraft.filter(draft => draft._id !== payload))\r\n    }\r\n  }\r\n})\r\n\r\nexport const { editOrinsertContentDraft, removeContentDraft } = slice.actions\r\nexport default slice.reducer","import scss from './loader.module.scss'\r\nimport '@/scss/global.scss'\r\n\r\nexport default function WriteNewLoader() {\r\n  return(\r\n    <div className={`${scss.write_new_loader_container} flex-row-normal-center-medium`}>\r\n      <div className={`${scss.write_new_loader_body} flex-column-normal-normal-small`}>\r\n        <div className={scss.write_new_loader_input}></div>\r\n        <div className={scss.write_new_loader_input}></div>\r\n        <div className='flex-row-normal-normal-small'>\r\n          <button></button>\r\n          <button></button>\r\n          <button></button>\r\n        </div>\r\n        <div style={{ height: '10rem' }} className={scss.write_new_loader_input}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import scss from './page.module.scss'\r\n\r\nimport type { Content, CustomInputsRef, ServerResponseError } from '@/global.type'\r\nimport type { AppDispatch, RootState } from '@/store/store'\r\nimport type { PostCommentsData } from '../post/page.type'\r\nimport type { CreatorState, ContentDraft } from '@/store/creator/creator.type'\r\nimport type { FormFieldsValidation } from '@/custom-hook/use-form/useForm.type'\r\n\r\nimport FormWrapper from \"@/component/form-wrapper/formWrapper\"\r\nimport TextInput from \"@/component/input/textInput/textInput\"\r\nimport TextArea from '@/component/input/textArea/textArea'\r\nimport MutatingLoader from '@/component/loader/mutatig-loader/mutatingLoader'\r\nimport TextTagInput from '@/component/input/text-tag-input/textTagInput'\r\nimport Button from '@/component/buttons/button/button'\r\nimport CheckBoxInput from '@/component/input/checkbox-input/checkBoxInput'\r\nimport LocalError from '@/component/errors/local-error/localError'\r\nimport WriteNewLoader from './loader'\r\n\r\nimport { Fragment, useRef } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate } from 'react-router-dom'\r\n\r\nimport { editOrinsertContentDraft, removeContentDraft } from '@/store/creator/creator'\r\n\r\nimport useForm from '@/custom-hook/use-form/useForm'\r\nimport useAuth from '@/custom-hook/use-auth/useAuth'\r\nimport useSearchParams from '@/custom-hook/use-search-params/useSearchParams'\r\nimport usePermitor from '@/custom-hook/use-permitor/useHavePermission'\r\nimport useMetadata from '@/custom-hook/use-metadata/useMetadata'\r\nimport useMutate from '@/custom-hook/use-request/useMutate'\r\n\r\nimport localStorage from '@/lib/local-storage/localStorage'\r\nimport fetcher from '@/lib/fetcher/fetcher'\r\n\r\nimport { AUTHORIZATION_OBJECT } from '@/conts'\r\n\r\nconst USE_FORM_VALIDATION: FormFieldsValidation<Content> = { title: { isMin: { message: 'Title is to short!', value: 4 }}}\r\n\r\n//Create content || Update content || Save draft || Update draft || Remove draft\r\nexport default function WriteNewPost() {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const redirect = useNavigate()\r\n  const creator = useSelector<RootState, CreatorState>(state => state.creator)\r\n  const postTagsRef = useRef<CustomInputsRef<string[]> | undefined>()\r\n  const postContentRef = useRef<CustomInputsRef<string> | undefined>()\r\n\r\n  const searchParams = useSearchParams()\r\n  const auth = useAuth()\r\n  const permitor = usePermitor()\r\n  \r\n  const contentID: string | null = searchParams.get('content-id')\r\n  const draftID: string | null = searchParams.get('draft-id')\r\n\r\n  if(!permitor.role(['Admin', 'Creator']).permited()) return <Navigate to='/'/>\r\n\r\n  const currContent: ContentDraft | undefined = \r\n    //Get content to edit\r\n    contentID ? \r\n    localStorage.get<ContentDraft>(contentID, 'null') :\r\n    //Get content draft to edit\r\n    draftID ?\r\n    creator.contentDraft.find(content => content._id === draftID) :\r\n    undefined\r\n\r\n  const isPost: boolean = currContent?.contentType === 'post'\r\n\r\n  useMetadata({ \r\n    title: \r\n      currContent?.isEdit && currContent ? `${isPost ? currContent.title : 'Comment'} ändern` :\r\n      draftID && currContent ? `${isPost ? currContent.title : 'Entwurf'} ändern` :\r\n      'Neue post schreiben',\r\n    description: 'Hier kannst neue post oder entwurfe schreiben oder ändern.'\r\n  })\r\n\r\n  const key: string = currContent?.isFromAdmin ? '' : currContent?.contentType === 'comment' ? `post-${currContent.onPost}-comments-${currContent.onPage}` : 'all-posts'\r\n  \r\n  const { mutate, isMutating, error } = useMutate<PostCommentsData | Content[]>(key)\r\n  const { submit, reset, register, formState: { errors }} = useForm<Content>(\r\n    USE_FORM_VALIDATION, \r\n    { title: currContent?.title, isHidden: currContent?.isHidden },\r\n    () => {\r\n      postTagsRef.current?.clear()\r\n      postContentRef.current?.clear()\r\n    }\r\n  )\r\n\r\n  const passError: ServerResponseError | undefined = error ? error : currContent?.isEdit && !currContent ? { code: 404, message: 'Content not found!' } : undefined\r\n    \r\n  const createNew = async(data: any): Promise<void> => {\r\n    delete data.alt\r\n    delete data.uploadImg\r\n    delete data.url\r\n\r\n    mutate(async function(option) {\r\n      if(currContent?.isEdit) {\r\n        const updated = await fetcher.post<Content>(`/admin/${currContent?.contentType}/update`, {...data, content: postContentRef.current?.value, tags: postTagsRef.current?.value, id: draftID || contentID }, AUTHORIZATION_OBJECT)\r\n\r\n        localStorage.remove(updated._id!)\r\n\r\n        //Edit post\r\n        if(currContent?.contentType === 'post') {\r\n          const state = option.state as Content[] || []\r\n\r\n          option.removeCache(`post-${updated._id}`)\r\n\r\n          if(!currContent.isFromAdmin) redirect(`/post/${updated._id}`)\r\n          else redirect(`/admin/${currContent.contentType}`)\r\n\r\n          return state.map(post => post._id === updated._id ? updated : post)\r\n        }\r\n        \r\n        //Edit comment\r\n        if(currContent?.contentType === 'comment') {\r\n          const state = option.state as PostCommentsData || { pagesCount: 0, comments: [] }\r\n\r\n          if(!currContent.isFromAdmin) {\r\n            redirect(`/post/${currContent?.onPost}?page=${currContent?.onPage}`)\r\n            return {...state, comments: state.comments.map(comment => comment._id === updated._id ? updated : comment) }\r\n          }\r\n\r\n          redirect('/admin/comment')\r\n          return undefined\r\n        }\r\n      }\r\n\r\n      //Insert post\r\n      const post = await fetcher.post<Content>(`/insert/post`, {...data, content: postContentRef.current?.value, tags: postTagsRef.current?.value }, AUTHORIZATION_OBJECT)\r\n      const state = option.state as Content[] || []\r\n\r\n      redirect(`/post/${post._id}`)\r\n      return [...state || [], post]\r\n    })\r\n\r\n    reset()\r\n  }\r\n\r\n  const saveDraft = (): void => {\r\n    const newDraftID: string = draftID || contentID || window.crypto.randomUUID()\r\n      \r\n    dispatch(editOrinsertContentDraft({...currContent, _id: newDraftID!, content: postContentRef.current?.value || '' }))\r\n      \r\n    searchParams.set({ 'draft-id': newDraftID })\r\n    searchParams.remove(['content-id'])\r\n\r\n    localStorage.remove(contentID!)\r\n  }\r\n\r\n  const deleteDraft = (): void => {\r\n    dispatch(removeContentDraft(draftID || contentID!))\r\n\r\n    searchParams.remove(['draft-id'])\r\n    reset()\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      {isMutating && <MutatingLoader/>}\r\n      {auth.isAuthPending ?\r\n        <WriteNewLoader/> :\r\n        <div className={`${scss.create_new_post_container} flex-row-normal-center-big`}>\r\n          <FormWrapper className={scss.create_new_post_form} onSubmit={submit(createNew)} isPending={false}>\r\n              {currContent?.contentType !== 'comment' ?\r\n              <Fragment>\r\n                <TextInput register={register} name='title' errors={errors} placeholder='Post title'/>\r\n                <CheckBoxInput register={register} name='isHidden' label='Hidde post'/>\r\n                <TextTagInput ref={postTagsRef} placeholder='Post tags' value={currContent?.tags}/>\r\n              </Fragment> : null}\r\n            <TextArea ref={postContentRef} defaultValue={currContent?.content} placeholder='Write content body here...'/>\r\n            <div className={scss.create_new_buttons_container}>\r\n              <Button label={currContent?.isEdit ? `Edit ${currContent?.contentType}` : `Create post`} type='submit'/>\r\n              <Button label={currContent && !contentID ? \"Save draft changes\" : 'Save as draft'} onClick={saveDraft}/>\r\n              <Button label=\"Delete draft\" onClick={deleteDraft}/>\r\n            </div>\r\n            {passError && <LocalError error={passError.message}/>}\r\n          </FormWrapper>\r\n      </div>}\r\n    </Fragment>\r\n  )\r\n}"],"names":["slice","createSlice","name","initialState","contentDraft","localStorage","get","reducers","editOrinsertContentDraft","state","payload","length","set","find","content","index","_id","map","removeContentDraft","filter","draft","actions","creator","reducer","WriteNewLoader","jsx","className","scss","write_new_loader_container","children","jsxs","write_new_loader_body","write_new_loader_input","style","height","USE_FORM_VALIDATION","title","isMin","message","value","dispatch","useDispatch","redirect","useNavigate","useSelector","postTagsRef","useRef","postContentRef","searchParams","useSearchParams","auth","useAuth","permitor","usePermitor","contentID","draftID","role","permited","Navigate","to","currContent","isPost","contentType","useMetadata","isEdit","description","key","isFromAdmin","onPost","onPage","mutate","isMutating","error","useMutate","submit","reset","register","formState","errors","useForm","isHidden","current","clear","passError","code","Fragment","MutatingLoader","isAuthPending","FormWrapper","onSubmit","async","data","alt","uploadImg","url","option","updated","fetcher","post","tags","id","AUTHORIZATION_OBJECT","remove","removeCache","pagesCount","comments","comment","isPending","TextInput","placeholder","CheckBoxInput","label","TextTagInput","ref","TextArea","defaultValue","Button","type","onClick","newDraftID","window","crypto","randomUUID","LocalError"],"mappings":"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"}