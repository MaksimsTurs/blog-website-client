{"version":3,"file":"search.js","sources":["../../../../src/custom-hook/use-outside-click/useOutsideClick.ts","../../../../src/conts.ts","../../../../src/component/tag-preview/tagPreview.tsx","../../../../src/component/input/text-tag-input/tag.ts","../../../../src/component/input/text-tag-input/textTagInput.tsx","../../../../src/lib/remove-duplicate/removeDuplicate.ts","../../../../src/page/search/component/sortInput.tsx","../../../../src/page/search/page.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nimport type { RefObject } from \"react\";\r\n\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nexport default function useOutsideClick(key: string, modalContainer: RefObject<HTMLElement>): boolean {\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  \r\n  useEffect(() => {\r\n    modalContainer.current?.addEventListener('click', (event: any) => {\r\n      if(event.target === event.currentTarget) {\r\n        setSearchParams(prev => {\r\n          prev.set(key, String(!prev.get(key)))\r\n          return prev\r\n        })\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return JSON.parse(searchParams.get(key) || 'false')\r\n}","export const MODALS_KEYS = {\r\n  'LOGIN-MODAL': 'login-modal',\r\n  'REGISTRATE-MODAL': 'registrate-modal',\r\n  'IS-SIDE-MENU-OPEN': 'is-side-menu-open',\r\n  'IS-EDIT-USER-MODAL-OPEN': 'is-edit-user-modal-open',\r\n  'IS-FILTER-MODAL-OPEN': 'is-filter-modal-open'\r\n}","import scss from './tagPreview.module.scss'\r\nimport '@/scss/global.scss'\r\n\r\nimport type { TagPreviewProps } from './/tagPreview.type.ts'\r\n\r\nexport default function TagPreview({ removeTag, tags }: TagPreviewProps) {\r\n  return (\r\n    <ul className={`${scss.tag_list} flex-row-flex-start-normal-small`}>\r\n      {tags.map(tag => {\r\n        const toRender: string = tag.replace(/\\-\\d*/g, '')\r\n        return toRender.trim() ? <li onClick={() => removeTag(tag)} className={scss.tag_item} key={tag}>{toRender}</li> : null\r\n      })}\r\n    </ul>\r\n  )\r\n} ","export default {\r\n  createTagArray: function(str: string) {\r\n    return str.split(/,/).map(tag => tag.length === 0 ? tag : `${tag}-${Math.round(Math.random() * 9999)}`)\r\n  },\r\n  removeTagKeys: function(tags: string[]) {\r\n    return tags.map(tag => tag.trim().replace(/\\-\\d*/g, ''))\r\n  }\r\n}","import type { TextTagInputProps } from \"../input.type\";\r\n\r\nimport { useState, Fragment, SyntheticEvent } from \"react\";\r\n\r\nimport TextInput from \"../textInput/textInput\";\r\nimport TagPreview from \"@/component/tag-preview/tagPreview\";\r\n\r\nimport tag from \"./tag\";\r\nimport removeDuplicate from \"@/lib/remove-duplicate/removeDuplicate\";\r\n\r\nexport default function TextTagInput({ getTags, placeholder, value }: TextTagInputProps) {\r\n  const [tags, setTags] = useState<string[]>(value || [])\r\n\r\n  const removeTag = (tag: string): void => {\r\n    setTags(prev => {\r\n      const newTagState: string[] = removeDuplicate(prev, tag)\r\n      getTags(newTagState)\r\n      return newTagState\r\n    })\r\n  }\r\n\r\n  const insertNewTag = (event: SyntheticEvent<HTMLInputElement>): void => {\r\n    const newTagState: string[] = tag.createTagArray(event.currentTarget.value)\r\n    setTags(newTagState)\r\n    getTags(tag.removeTagKeys(newTagState))\r\n  }\r\n  \r\n  return(\r\n    <Fragment>\r\n      <TextInput name=\"tags\" onInput={insertNewTag} placeholder={placeholder} value={tag.removeTagKeys(tags).join(', ')}/>\r\n      <TagPreview removeTag={removeTag} tags={tags}/>\r\n    </Fragment>\r\n  )\r\n}","export default function removeDuplicate(array: any[], duplicate: any) {\r\n  let withoutDuplicate: any[] = []\r\n\r\n  for(let index: number = 0; index < array.length; index++) {\r\n    if(array[index] === duplicate) continue\r\n    withoutDuplicate.push(array[index])\r\n  }\r\n\r\n  return withoutDuplicate\r\n}","import TextInput from '@/component/input/textInput/textInput'\r\n\r\nimport type { SortInputProps } from '../page.type'\r\n\r\nexport default function SortInput({ changeSortData, sortData, sortDataName }: SortInputProps) {\r\n  return(\r\n    <TextInput \r\n      name={sortDataName} \r\n      placeholder={`Find by ${sortDataName}...`} \r\n      value={sortData[sortDataName]} \r\n      onInput={(event) => changeSortData(sortDataName, event.currentTarget.value)}/>\r\n    )\r\n}","import scss from './page.module.scss'\r\nimport '@/scss/global.scss'\r\n\r\nimport HomeLoader from '../home/loader';\r\nimport Empty from '@/component/empty/empty';\r\nimport Error from '@/component/error/error';\r\nimport Button from '@/component/button/button'\r\nimport Pagination from '@/component/pagination/pagination'\r\nimport PostContainer from '@/component/post-container/postContainer'\r\nimport SortInput from './component/sortInput';\r\nimport PaginationLoader from '@/component/pagination/component/paginationLoader';\r\nimport TextTagInput from '@/component/input/text-tag-input/textTagInput';\r\n\r\nimport { ArrowDownWideNarrow, ArrowUpNarrowWide, Eye, Filter, Heart, MessageCircle } from 'lucide-react';\r\nimport { Fragment, useRef, useState } from 'react';\r\n\r\nimport type { SortData, SortOption, SortedPosts } from './page.type';\r\n\r\nimport useRequest from '@/custom-hook/_use-request/_useRequest';\r\nimport useSearchParams from '@/custom-hook/use-search-params/useSearchParams';\r\n\r\nimport fetcher from '@/lib/fetcher/fetcher';\r\nimport coockie from '@/lib/coockie/coockie';\r\n\r\nimport { MODALS_KEYS } from '@/conts';\r\nimport useOutsideClick from '@/custom-hook/use-outside-click/useOutsideClick';\r\n\r\nexport default function Search() {\r\n  const searchParams = useSearchParams()\r\n  const selectedTag: string | null = searchParams.get('tag')\r\n  const tagRef = useRef<string[]>(selectedTag ? [selectedTag] : [])\r\n  const modalContainerRef = useRef<HTMLDivElement>(null)\r\n  const is930px: boolean = window.matchMedia('(width <= 930px)').matches\r\n  const isOpen: boolean = !is930px ? true : useOutsideClick(MODALS_KEYS['IS-FILTER-MODAL-OPEN'], modalContainerRef)\r\n  const [sortData, setSortData] = useState<SortData>({ author: '', content: '', title: '' })\r\n  const [sortOption, setSortOption] = useState<SortOption>()\r\n  const page: number = parseInt(searchParams.get('page') || '0')\r\n  const sortOptions = [\r\n    { name: 'Likes', icon: <Heart size={17}/> },\r\n    { name: 'Views', icon: <Eye size={17}/> },\r\n    { name: 'Comments', icon: <MessageCircle size={17}/> }\r\n  ]\r\n\r\n  const { isPending, data, error, request } = useRequest<SortedPosts>({ \r\n    deps: [`sort-${page}`],\r\n    noCache: true,\r\n    request: async () => await fetcher.post<SortedPosts>(`/sort/${page}`, {...sortData, sortOption, tags: tagRef.current }, { 'Authorization': `Bearer ${coockie.getOne('PR_TOKEN')}` }) \r\n  })\r\n\r\n  const changeSort = (name: string): void => {\r\n    if(sortOption?.[name] === 'descending') setSortOption({ [name]: 'ascending' })\r\n    else if(sortOption?.[name] === 'ascending') setSortOption({ [name]: undefined })\r\n    else setSortOption({ [name]: 'descending' })\r\n  }\r\n\r\n  const getTags = (tags: string[]): void => {\r\n    tagRef.current = tags\r\n  }\r\n\r\n  const changeSortData = (name: string, value: any): void => {\r\n    setSortData(prev => ({...prev, [name]: value }))\r\n  }\r\n\r\n  const resetSort = (): void => {\r\n    setSortData({ author: '', content: '', title: '' })\r\n    setSortOption(undefined)\r\n    searchParams.set({ 'page': 0 })\r\n  }\r\n\r\n  const openFilterModal = (): void => {\r\n    searchParams.set({ [MODALS_KEYS['IS-FILTER-MODAL-OPEN']]: true })\r\n  }\r\n\r\n  const getSorted = (): void => {\r\n    if(page === 0) request()\r\n    else searchParams.set({ 'page': 0 })\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      {error ? <Error code={error.code} message={error.message}/> : \r\n      <div style={{ height: '100%' }} className='flex-row-normal-normal-medium'>\r\n        <div style={{ width: '100%', minHeight: '100%' }} className='flex-column-normal-normal-small'>\r\n          {is930px ? <Filter onClick={openFilterModal} className={scss.search_filter_modal_button}/> : null}\r\n          {isPending ? <PaginationLoader/> : data && data.pagesCount >= 1 ? <Pagination pagesCount={data.pagesCount}/> : null}\r\n          {isPending ? <HomeLoader/> : \r\n          data && data.posts.length === 0 ? <Empty option={{ flexCenterCenter: true, height: 'FULL' }} label='Nothing found!'/> : \r\n          data && data.posts.map(post => <PostContainer key={post._id} post={post} type=\"preview\"/>)}\r\n          {isPending ? <PaginationLoader/> : data && data.pagesCount >= 1 ? <Pagination pagesCount={data.pagesCount}/> : null}\r\n        </div>\r\n        <div ref={modalContainerRef} className={isOpen ? scss.search_filter_container : `${scss.search_filter_container} ${scss.search_filter_container_hidden}`}>\r\n          <div className='main-content-container flex-column-normal-normal-small'>\r\n            <p className={scss.search_sort_type_title}>Sort by</p>\r\n            <div className='flex-column-normal-normal-small'>\r\n              {sortOptions.map(option => (\r\n                <button\r\n                  key={option.name}\r\n                  onClick={() => changeSort(option.name)}\r\n                  className={sortOption?.[option.name] ? `${scss.search_sort_button} ${scss.search_sort_button_active} flex-row-center-center-medium` : `${scss.search_sort_button} flex-row-center-center-medium`}>\r\n                  {option.icon}\r\n                  <p>{option.name}</p>\r\n                  {sortOption?.[option.name] === 'descending' ? <ArrowDownWideNarrow size={14}/> : sortOption?.[option.name] === 'ascending' ?  <ArrowUpNarrowWide size={14}/> : null }\r\n                </button>\r\n              ))}\r\n            </div>\r\n            <SortInput changeSortData={changeSortData} sortData={sortData} sortDataName='content'/>\r\n            <SortInput changeSortData={changeSortData} sortData={sortData} sortDataName='author'/>\r\n            <SortInput changeSortData={changeSortData} sortData={sortData} sortDataName='title'/>\r\n            <TextTagInput getTags={getTags} placeholder='Find by tags'/>\r\n            <div className={`${scss.search_filter_body_buttons} flex-row-normal-normal-small`}>\r\n              <Button onClick={getSorted} label=\"Sort\"/>\r\n              <Button onClick={resetSort} label=\"Reset\"/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>}\r\n    </Fragment>\r\n  )\r\n}"],"names":["useOutsideClick","key","modalContainer","searchParams","setSearchParams","useSearchParams","useEffect","current","addEventListener","event","target","currentTarget","prev","set","String","get","JSON","parse","MODALS_KEYS","TagPreview","removeTag","tags","jsx","className","scss","tag_list","children","map","tag","toRender","replace","trim","onClick","tag_item","createTagArray","str","split","length","Math","round","random","removeTagKeys","TextTagInput","getTags","placeholder","value","setTags","useState","Fragment","TextInput","name","onInput","newTagState","join","array","duplicate","withoutDuplicate","index","push","removeDuplicate","SortInput","changeSortData","sortData","sortDataName","selectedTag","tagRef","useRef","modalContainerRef","is930px","window","matchMedia","matches","isOpen","setSortData","author","content","title","sortOption","setSortOption","page","parseInt","sortOptions","icon","Heart","size","Eye","MessageCircle","isPending","data","error","request","useRequest","deps","noCache","async","fetcher","post","Authorization","coockie","getOne","Error","code","message","jsxs","style","height","width","minHeight","Filter","PaginationLoader","pagesCount","Pagination","HomeLoader","posts","Empty","option","flexCenterCenter","label","PostContainer","type","_id","ref","changeSort","ArrowDownWideNarrow","ArrowUpNarrowWide","Button"],"mappings":"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"}